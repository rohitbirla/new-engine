# -*- coding: utf-8 -*-
"""perceptron.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P7ELdvIIPFArNkH1G3rR6JYZVZLaT_Nu

Implement of single layer perceptron
"""

from numpy import exp, array, random, dot, tanh

class NeuralNetwork(): 
      
    def __init__(self): 
          
        random.seed(1) 
          
        # 3x1 Weight matrix 
        self.weight_matrix = 2 * random.random((3, 1)) - 1
  
    # tanh as activation function 
    def tanh(self, x): 
        return tanh(x) 
  
    
    def tanh_derivative(self, x): 
        return 1.0 - tanh(x) ** 2
  
    # forward propagation 
    def forward_propagation(self, inputs): 
        return self.tanh(dot(inputs, self.weight_matrix)) 
      
    # training the neural network. 
    def train(self, train_inputs, train_outputs, 
                            num_train_iterations): 
                                  
        # Number of iterations we want to 
        # perform for this set of input. 
        for iteration in range(num_train_iterations): 
            output = self.forward_propagation(train_inputs) 
  
            # Calculate the error in the output. 
            error = train_outputs - output 
   
            adjustment = dot(train_inputs.T, error *
                             self.tanh_derivative(output)) 
                               
          
            self.weight_matrix += adjustment

if __name__ == "__main__": 
      
    neural_network = NeuralNetwork() 
      
    print ('Random weights at the start of training') 
    print (neural_network.weight_matrix) 
  
    train_inputs = array([[1,2,3], [4,5,6], [7,8,9]]) 
    train_outputs = array([[0, 1, 1]]).T 
  
    neural_network.train(train_inputs, train_outputs, 10000) 
  
    print ('New weights after training') 
    print (neural_network.weight_matrix) 
  
    # Test the neural network with a new situation. 
    print ("Testing network on new examples ->") 
    print (neural_network.forward_propagation(array([4,7,8])))